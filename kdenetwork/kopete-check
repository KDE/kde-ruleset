#!/bin/bash
### Created by: Pali Roh√°r <pali.rohar@gmail.com> ###
echo "Initial commits:"
git rev-list --max-parents=0 --all | git name-rev --stdin
echo ""
echo "Unmerged svnmerge commits:"
git log --grep='svnmerge' --no-merges --format=%H --all | git name-rev --stdin
echo ""
echo "Unmerged 'merge from' commits:"
git log --grep='merge from' --no-merges --format=%H --all | git name-rev --stdin
echo ""
echo "Unmerged 'rebase from' commits:"
git log --grep='rebase from' --no-merges --format=%H --all | git name-rev --stdin
echo ""
echo "Unmerged 'rebase to' commits:"
git log --grep='rebase to' --no-merges --format=%H --all | git name-rev --stdin
echo ""
echo "Unmerged 'Sync with' commits:"
git log --grep='[Ss]ync with' --no-merges --format=%H --all | git name-rev --stdin
echo ""
echo "Unmerged 'merge branch' commits:"
git log --grep='[Mm]erge.*branch' --no-merges --format=%H --all | git name-rev --stdin
echo ""
echo "Merge commits with parents on one path:"
git rev-list --merges --all | while read commit; do
	commits=$(git log --pretty="%P" -n 1 "$commit")
	for c1 in $commits; do
		for c2 in $commits; do
			if [ "$c1" = "$c2" ]; then continue; fi
			merge=$(git merge-base "$c1" "$c2")
			if [ "$c1" = "$merge" ] || [ "$c2" = "$merge" ]; then
				echo "$commit" | git name-rev --stdin
				break 2
			fi
		done
	done
done
echo ""
echo "Disconnected tags:"
git for-each-ref --format="%(refname)" refs/tags | while read ref; do if [ "$(git branch -a --contains $ref | wc -l)" = "0" ]; then echo $ref; fi; done
echo
echo "Unmerged branches:"
git branch -a --no-merged master | sed 's/\s*//g'
echo ""
echo "Already merged branches:"
git branch -a --merged master | sed 's/\s*//g'
echo ""
echo "Branches state:"
git for-each-ref --format="%(refname)" refs/tags/backups refs/heads/work | while read ref; do echo "$ref"; git branch -a --contains $ref; echo; done
