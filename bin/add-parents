#!/bin/bash

# Usage: git filter-branch --parent-filter "$(add-parents <parentmap>)"
#
# Outputs a shell script for filter-branch --parent-filter, to add extra
# parents to existing commits.
# 
# parentmap must be a filename with *git* revisions formatted like this:
# 
# f3ca1dab5c862581690a988ab41ac59a292095f8 1ddbe3918159275dd514aea734839583bfd24c59
# fceef269d3a1c3e9321f5dd376f6b305176854d6 da3e27ee47f6016cff637045f29a74f90a4cdab2
# 
# For each line in the parentmap, the returned script will add the first
# revision as a new parent for the second revision. In other words, it adds
# a new first->second connection between revisions. Most probably, the first
# revision will predate the second.
# Only full SHA-1 IDs are supported, not general revision parameters,
# like abbreviated hashes or tag names.
#
# It seems to work better if you use --date-order in filter-branch, because
# the date order usually matches the SVN revision order.
#
# You can use bin/translateRevlist.py to convert a list of SVN revision
# number pairs into git revision pairs usable in this script.

set -e

parentmap="$1"
if [[ $parentmap = '-' ]]; then
    parentmap=/dev/stdin; # Not portable. So sue me.
fi

codebefore='
merge_gitrev=;
case $GIT_COMMIT in
'
codeafter='
esac;
if [ -n "$merge_gitrev" ]; then
    echo "$(cat) -p $(map $merge_gitrev)";
else
    cat;
fi'
code="$codebefore"
while read newparent child x; do
    if [[ ${#newparent} -ne 40 ]]; then
        echo "error: invalid commit ID: '${newparent}'" >&2
        exit 1
    fi
    code="$code    $child) merge_gitrev=$newparent;;
"
done < "$parentmap"
code="$code$codeafter"
shift

echo "$code"

# vim: set ts=4 sw=4 et tw=76:
