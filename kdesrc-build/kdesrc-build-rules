#
# Created by Jeremy Whiting <jpwhiting@kde.org>
# Updated by Michael Pyne <mpyne@kde.org>
#

# Note from posterity:
# These rules are woefully incomplete, for a few reasons:
# 1) SVN does not contain all the tags that were in CVS. This is something that
#    I noticed when looking at the graphical tree and there were no tags for
#    practically the first year of development. I confirmed by checking
#    http://kdesrc-build.kde.org/releases/ and seeing a ton of older tarballs
#    that had no equivalent tag in SVN.
# 2) kdesrc-build has been developed in several different locations, and was not
#    the only files in the directories it was developed in. This is mostly
#    documented in here however. The largest problem came with the 0.97.x and
#    0.98.x split, where 0.97.x was used to build KDE 3.5 during the big run-up
#    to KDE 4, and 0.98.x advanced to be able to keep building KDE 4 during the
#    transition to CMake and Qt 4.
# 3) Although the tag rules should be OK for the most part, svn-all-fast-export
#    (at least when I ran it) would put the tag on a separate branch seemingly
#    created just to bump the version (which is probably equivalent to how I did
#    it in SVN, but still annoying).
# 4) Perhaps worst, (and I still haven't fully figured out the cause), but there
#    is a *gap* in the repository generated by these rules. i.e. instead of one
#    complete git history graph, there are actually two trees. This required
#    manual grafting using a graft (.git/info/grafts) followed by
#    git-filter-branch to "bake in" the graft into the resultant repository.
#    The exact commit to look for contains "Always use unsermake's estimated
#    progress output" in the shortlog (should be 37989db).
#
# After I used this rule set, I used the "grafts" file in this directory to
# manually patch up the two git trees into a single git tree, by copying
# grafts to .git/info/
#
# From there, it was required to use git filter-branch in order to re-encode
# the repository in the form that included the graft. I didn't remember to keep
# the exact command, but it was something like this:
# $ git filter-branch --tag-name-filter cat -- --all
#     a) --------------------^                    ^
#     b) -----------------------------------------/
#
# a) is required to actually convert all of the tags that were created into
#    new tags pointing at the appropriate commit.
# b) the -- passes remaining options to some internal git sub command, the
#    --all is used to ensure that *all* commits get filtered.
#
# After doing this, there will be "original" refs hanging around in case there
# was a screwup, but using qgit4 or gitk should show two connected trees (one
# being original/foo still with the graft in effect, the other being the new
# master, kde-3.5 etc. with no graft).
#
# In order to test, you need to remove the .git/refs/original* from the
# repository to avoid confusing the next command. You want to get a pristine
# copy by git-cloning the directory you just got done filter-branching.
# YOU MUST MAKE SURE TO USE file://$dir syntax to force a real clone.
#
# $ cd .. ; git clone $PWD/kdesrc-build-repo converted-kdesrc-build-repo
#
# The converted-kdesrc-build-repo should have no grafts embedded within
# (.git/info/grafts) but should be properly all connected.
#
# The last step for me was to run the "kdesrc-build-old-tags" script (also in
# this directory). This script contains a listing of tags, their appropriate
# svn revision, and the date to use for the generated git tag. It shouldn't
# depend on git sha1s since only the svn revision is used in searching.
#
# The entries themselves were generated using a fairly annoying process of
# manually downloading release tarballs and comparing sha1sums of the files in
# the tarball with sha1sums of the git blobs for the matching file, in a
# certain range of git commits.
#
# (The way I did this was by using git-ls-tree $commit-sha^{tree} to find the
# blob sha1 for the file I was comparing against, and then git-show
# $blob-sha1 | sha1sum to get the equivalent sha1sum. Obviously I
# shell-scripted/automated the hell out of this, but I didn't save that
# command line either :( )
#
# In addition to downloading tarballs, there were some tags I did not have the
# tarball for any longer. In this case, I used qgit4 to examine kdesrc-build
# step-by-step until the $version variable was bumped. At that time I only
# bumped the version just prior to release (in general). These tags are
# therefore really good educated guesses, but it's better than leaving the
# history completely empty.
#
# There were some other minor hiccups I accounted for using
# kdesrc-build-old-tags, but for the most part it worked well. In retrospect I
# should have simply gone back and regenerated *all* tags using this method I
# think, as the history would have looked a wee bit better.
#
# After doing all that and some git garbage collection and heavy repacking, I
# had the repository that got uploaded to git.kde.org/kdesrc-build.
#
# Have fun trying to reproduce. :-/  --mpyne

#
# Create the repository
create repository kdesrc-build
end repository

# The KDE 3.5 branch where development briefly occurred in parallel with a "devel"
# version.
match /branches/KDE/3.5/kdesdk/scripts/(kdesvn-build.*)
  prefix /\1 # See below for another example of this prefix
  repository kdesrc-build
  branch kde-3.5
end match

# Only parts of kdesdk/scripts belonged to kdesrc-build.
# This rule *doesn't* end with a slash. Because of that we must use prefix
# to fool everything into working, and more specifically a prefix of the
# resultant path. (Discussed on kde-scm-interest in a 23-Dec-2010 thread)
match /trunk/KDE/kdesdk/scripts/(kdesvn-build.*)
  repository kdesrc-build
  branch master
  prefix /\1
end match

match /trunk/KDE/kdesdk/doc/scripts/kdesvn-build/
  prefix doc/ # Keep separate
  repository kdesrc-build
  branch master
end match

# Only parts of kdesdk/scripts belonged to kdesrc-build.
# This rule *doesn't* end with a slash. Because of that we must use prefix
# to fool everything into working, and more specifically a prefix of the
# resultant path. (Discussed on kde-scm-interest in a 23-Dec-2010 thread)
match /trunk/KDE/kdesdk/scripts/(kdesrc-build.*)
  repository kdesrc-build
  prefix /\1
  branch master
end match

match /trunk/KDE/kdesdk/doc/scripts/kdesrc-build/
  prefix doc/ # Keep separate
  repository kdesrc-build
  branch master
end match

match /branches/work/kdesvn-build-1.10/kdesvn-build/
  repository kdesrc-build
  branch work-kdesvn-build-1.10
end match

# From rev 302561 (entrance to CVS) to 406674, the script was called kdecvs-build, and
# kept in /trunk/kdenonbeta/kdecvs-build.
# From rev 406675-409924 kdecvs-build still existed, but development occurred only to 
# kdesvn-build. (kdesvn-build was created with rev 406675, in the same dir).
# kdecvs-build was deleted on revision 409925
# kdesvn-build was moved to /trunk/KDE/kdesdk/scripts on revision 414006
# kdesvn-build was renamed to kdesrc-build on revision 1143246 With all that
# said, I don't use min/max revision here to ensure that the deletion/renamings
# get picked up correctly.
match /trunk/kdenonbeta/kdecvs-build/
  repository kdesrc-build
  branch old-kdecvs-build
end match

# Tag handling
match /tags/kdesvn-build/(\d+)\.(\d+[^\/]*)/kdenonbeta/kdecvs-build/
  repository kdesrc-build
  branch refs/tags/v\1.\2
end match

# Mis-tagged
match /tags/kdesvn-build/0\.97\.4/kdesvn-build/
  min revision 451502
  max revision 451504
  branch refs/tags/v0.97.4
  repository kdesrc-build
end match

# Normal tag style
match /tags/kdesvn-build/(\d+)\.(\d+[^\/]*)/
  min revision 453745
  branch refs/tags/v\1.\2
  repository kdesrc-build
end match

# Ignore everything else
match /
end match
